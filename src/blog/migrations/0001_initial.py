# Generated by Django 4.2.16 on 2025-03-03 17:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import nightlife.methods


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('comments', '0002_comment_published'),
        ('artists', '__first__'),
        ('tags', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name="Titre de l'article")),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('created_on', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('published', models.BooleanField(default=False, verbose_name='Publié')),
                ('is_featured', models.BooleanField(default=False, verbose_name="Présent sur la page d'accueil")),
                ('summary', models.CharField(blank=True, max_length=255, null=True, verbose_name='Sommaire')),
                ('content', models.TextField(blank=True, verbose_name='Contenu')),
                ('thumbnail', models.ImageField(blank=True, upload_to=nightlife.methods.PathAndRename('blog/'))),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author', to=settings.AUTH_USER_MODEL)),
                ('comments', models.ManyToManyField(blank=True, related_name='blogpost_comments', to='comments.comment')),
                ('linked_artists', models.ManyToManyField(blank=True, related_name='linked_artists', to='artists.artist', verbose_name='Artistes liés')),
                ('related_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_event', to='events.event', verbose_name='Évènement lié')),
                ('tags', models.ManyToManyField(related_name='blogpost_tags', to='tags.tag')),
            ],
            options={
                'verbose_name': 'Article',
                'ordering': ['-created_on'],
            },
        ),
    ]
